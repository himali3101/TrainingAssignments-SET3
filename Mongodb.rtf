{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\*\generator Riched20 10.0.18362}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang9\par
\par
\b\fs32 Q1. Insert the following documents into a movies collection.\par

\pard\li720\sa200\sl276\slmult1\b0\fs22 MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> db.movies.insert(\par
... \{\par
... "title" : "Fight Club",\par
... "writer" : "Chuck Palahniuko",\par
... "year" : "1999",\par
... "actors" : [\par
... "Brad Pitt",\par
... "Edward Norton"\par
... ]\par
... \})\par
WriteResult(\{ "nInserted" : 1 \})\par
\par
MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> db.movies.insert(\par
... \{\par
... "title" : "Pulp Fiction",\par
... "writer" : "Quentin Tarantino",\par
... "year" : "1994",\par
... "actors" : [\par
... "John Travolta",\par
... "Uma Thurman"\par
... ]\par
... \})\par
WriteResult(\{ "nInserted" : 1 \})\par
MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> db.movies.insert(\par
... \{\par
... "title" : "Inglorious Basterds",\par
... "writer" : "Quentin Tarantino",\par
... "year" : "2009",\par
... "actors" : [\par
... "Brad Pitt",\par
... "Diane Kruger",\par
... "Eli Roth"\par
... ]\par
... \})\par
WriteResult(\{ "nInserted" : 1 \})\par
MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> db.movies.insert(\par
... \{\par
... "title" : "The Hobbit: An Unexpected Journey",\par
... "writer" : "J.R.R. Tolkein",\par
... "year": "2012",\par
... "franchise" : "The Hobbit"\par
... \})\par
WriteResult(\{ "nInserted" : 1 \})\par
\par
MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> db.movies.insert( \{ "title" : "The Hobbit: The Desolation of Smaug", "writer" : "J.R.R. Tolkein", "year" : "2013", "franchise" : "The Hobbit" \}) ;\par
WriteResult(\{ "nInserted" : 1 \})\par
\par
MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> db.movies.insert(\par
... \{\par
... "title" : "The Hobbit: The Battle of the Five Armies",\par
... "writer" : "J.R.R. Tolkein",\par
... "year" : "2012",\par
... "franchise" : "The Hobbit",\par
... "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness."\par
... \})\par
WriteResult(\{ "nInserted" : 1 \})\par
MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> db.movies.insert(\par
... \{\par
... "title" : "Pee Wee Herman's Big Adventure"\par
... \}\par
... )\par
WriteResult(\{ "nInserted" : 1 \})\par
MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> db.movies.insert(\par
... \{\par
... "title" : "Avatar"\par
... \}\par
... )\par
WriteResult(\{ "nInserted" : 1 \})\par
MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> show collections\par
movies\par

\pard\sa200\sl276\slmult1\par
\b\fs32 Q2. query the movies collection to\b0\fs22\par
\tab\b\fs28 1.get all documents\par
\b0\fs22\tab\tab  db.movies.find().pretty()\par

\pard\li1440\sa200\sl276\slmult1\{\par
        "_id" : ObjectId("5f2971dc565a201f2c63a9b4"),\par
        "title" : "Fight Club",\par
        "writer" : "Chuck Palahniuko",\par
        "year" : "1999",\par
        "actors" : [\par
                "Brad Pitt",\par
                "Edward Norton"\par
        ]\par
\}\par
\{\par
        "_id" : ObjectId("5f297240565a201f2c63a9b5"),\par
        "title" : "Pulp Fiction",\par
        "writer" : "Quentin Tarantino",\par
        "year" : "1994",\par
        "actors" : [\par
                "John Travolta",\par
                "Uma Thurman"\par
        ]\par
\}\par
\{\par
        "_id" : ObjectId("5f29725a565a201f2c63a9b6"),\par
        "title" : "Inglorious Basterds",\par
        "writer" : "Quentin Tarantino",\par
        "year" : "2009",\par
        "actors" : [\par
                "Brad Pitt",\par
                "Diane Kruger",\par
                "Eli Roth"\par
        ]\par
\}\par
\{\par
        "_id" : ObjectId("5f29727a565a201f2c63a9b7"),\par
        "title" : "The Hobbit: An Unexpected Journey",\par
        "writer" : "J.R.R. Tolkein",\par
        "year" : "2012",\par
        "franchise" : "The Hobbit"\par
\}\par
\{\par
        "_id" : ObjectId("5f2972a6565a201f2c63a9b8"),\par
        "title" : "The Hobbit: The Desolation of Smaug",\par
        "writer" : "J.R.R. Tolkein",\par
        "year" : "2013",\par
        "franchise" : "The Hobbit"\par
\}\par
\{\par
        "_id" : ObjectId("5f29730a565a201f2c63a9b9"),\par
        "title" : "The Hobbit: The Battle of the Five Armies",\par
        "writer" : "J.R.R. Tolkein",\par
        "year" : "2012",\par
        "franchise" : "The Hobbit",\par
        "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness."\par
\}\par
\{\par
        "_id" : ObjectId("5f297324565a201f2c63a9ba"),\par
        "title" : "Pee Wee Herman's Big Adventure"\par
\}\par
\{ "_id" : ObjectId("5f297345565a201f2c63a9bb"), "title" : "Avatar" \}\par

\pard\sa200\sl276\slmult1\b\fs28\tab 2.get all documents with writer set to "Quentin Tarantino"\par

\pard\li1440\sa200\sl276\slmult1\b0\fs24 MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> db.movies.find(\{"writer" : "Quentin Tarantino"\}).pretty()\par
\{\par
        "_id" : ObjectId("5f297240565a201f2c63a9b5"),\par
        "title" : "Pulp Fiction",\par
        "writer" : "Quentin Tarantino",\par
        "year" : "1994",\par
        "actors" : [\par
                "John Travolta",\par
                "Uma Thurman"\par
        ]\par
\}\par
\{\par
        "_id" : ObjectId("5f29725a565a201f2c63a9b6"),\par
        "title" : "Inglorious Basterds",\par
        "writer" : "Quentin Tarantino",\par
        "year" : "2009",\par
        "actors" : [\par
                "Brad Pitt",\par
                "Diane Kruger",\par
                "Eli Roth"\par
        ]\par
\}\par
MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> db.movies.find(\{year:\{$gt:"1990", $lt:"2000"\}\}).pretty()\par
\{\par
        "_id" : ObjectId("5f2971dc565a201f2c63a9b4"),\par
        "title" : "Fight Club",\par
        "writer" : "Chuck Palahniuko",\par
        "year" : "1999",\par
        "actors" : [\par
                "Brad Pitt",\par
                "Edward Norton"\par
        ]\par
\}\par
\{\par
        "_id" : ObjectId("5f297240565a201f2c63a9b5"),\par
        "title" : "Pulp Fiction",\par
        "writer" : "Quentin Tarantino",\par
        "year" : "1994",\par
        "actors" : [\par
                "John Travolta",\par
                "Uma Thurman"\par
        ]\par
\}\par

\pard\sa200\sl276\slmult1\b\fs28\tab 3. get all documents where actors include "Brad Pitt"\par

\pard\li1440\sa200\sl276\slmult1\b0\fs24 MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> db.movies.find(\{"actors" : "Brad Pitt"\}).pretty()\par
\{\par
        "_id" : ObjectId("5f2971dc565a201f2c63a9b4"),\par
        "title" : "Fight Club",\par
        "writer" : "Chuck Palahniuko",\par
        "year" : "1999",\par
        "actors" : [\par
                "Brad Pitt",\par
                "Edward Norton"\par
        ]\par
\}\par
\{\par
        "_id" : ObjectId("5f29725a565a201f2c63a9b6"),\par
        "title" : "Inglorious Basterds",\par
        "writer" : "Quentin Tarantino",\par
        "year" : "2009",\par
        "actors" : [\par
                "Brad Pitt",\par
                "Diane Kruger",\par
                "Eli Roth"\par
        ]\par
\}\par

\pard\sa200\sl276\slmult1\b\fs28\par
\tab 4. get all documents with franchise set to "The Hobbit"\par

\pard\li1440\sa200\sl276\slmult1\b0\fs24 MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> db.movies.find(\{"franchise" : "The Hobbit"\}).pretty()\par
\{\par
        "_id" : ObjectId("5f29727a565a201f2c63a9b7"),\par
        "title" : "The Hobbit: An Unexpected Journey",\par
        "writer" : "J.R.R. Tolkein",\par
        "year" : "2012",\par
        "franchise" : "The Hobbit"\par
\}\par
\{\par
        "_id" : ObjectId("5f2972a6565a201f2c63a9b8"),\par
        "title" : "The Hobbit: The Desolation of Smaug",\par
        "writer" : "J.R.R. Tolkein",\par
        "year" : "2013",\par
        "franchise" : "The Hobbit"\par
\}\par
\{\par
        "_id" : ObjectId("5f29730a565a201f2c63a9b9"),\par
        "title" : "The Hobbit: The Battle of the Five Armies",\par
        "writer" : "J.R.R. Tolkein",\par
        "year" : "2012",\par
        "franchise" : "The Hobbit",\par
        "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness."\par
\}\par

\pard\sa200\sl276\slmult1\b\fs28\par
\tab 5. get all movies released in the 90s\par

\pard\li1440\sa200\sl276\slmult1\b0\fs24 MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> db.movies.find(\{year:\{$gt:"1990", $lt:"2000"\}\})\par
\{ "_id" : ObjectId("5f2971dc565a201f2c63a9b4"), "title" : "Fight Club", "writer" : "Chuck Palahniuko", "year" : "1999", "actors" : [ "Brad Pitt", "Edward Norton" ] \}\par
\{ "_id" : ObjectId("5f297240565a201f2c63a9b5"), "title" : "Pulp Fiction", "writer" : "Quentin Tarantino", "year" : "1994", "actors" : [ "John Travolta", "Uma Thurman" ] \}\par

\pard\sa200\sl276\slmult1\b\fs28\par
\tab 6. get all movies released before the year 2000 or after 2010\par

\pard\li1440\sa200\sl276\slmult1\b0\fs22\tab\fs24 MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> db.movies.find(\{$or : [ \{year:\{$gt:"2000"\}\}, \{year : \{$lt:"2010"\}\} ]\}).pretty()\par
\{\par
        "_id" : ObjectId("5f2971dc565a201f2c63a9b4"),\par
        "title" : "Fight Club",\par
        "writer" : "Chuck Palahniuko",\par
        "year" : "1999",\par
        "actors" : [\par
                "Brad Pitt",\par
                "Edward Norton"\par
        ]\par
\}\par
\{\par
        "_id" : ObjectId("5f297240565a201f2c63a9b5"),\par
        "title" : "Pulp Fiction",\par
        "writer" : "Quentin Tarantino",\par
        "year" : "1994",\par
        "actors" : [\par
                "John Travolta",\par
                "Uma Thurman"\par
        ]\par
\}\par
\{\par
        "_id" : ObjectId("5f29725a565a201f2c63a9b6"),\par
        "title" : "Inglorious Basterds",\par
        "writer" : "Quentin Tarantino",\par
        "year" : "2009",\par
        "actors" : [\par
                "Brad Pitt",\par
                "Diane Kruger",\par
                "Eli Roth"\par
        ]\par
\}\par
\{\par
        "_id" : ObjectId("5f29727a565a201f2c63a9b7"),\par
        "title" : "The Hobbit: An Unexpected Journey",\par
        "writer" : "J.R.R. Tolkein",\par
        "year" : "2012",\par
        "franchise" : "The Hobbit"\par
\}\par
\{\par
        "_id" : ObjectId("5f2972a6565a201f2c63a9b8"),\par
        "title" : "The Hobbit: The Desolation of Smaug",\par
        "writer" : "J.R.R. Tolkein",\par
        "year" : "2013",\par
        "franchise" : "The Hobbit"\par
\}\par
\{\par
        "_id" : ObjectId("5f29730a565a201f2c63a9b9"),\par
        "title" : "The Hobbit: The Battle of the Five Armies",\par
        "writer" : "J.R.R. Tolkein",\par
        "year" : "2012",\par
        "franchise" : "The Hobbit",\par
        "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness."\par
\}\par

\pard\li720\sa200\sl276\slmult1\fs22\par
\b\fs32 Update Documents\par
\fs28 1. add a synopsis to "The Hobbit: An Unexpected Journey" : "A reluctant hobbit,\par
Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of\par

\pard\li720\ri-590\sa200\sl276\slmult1\tx9230 dwarves to reclaim their mountain home - and the gold within it - from the\par

\pard\li720\sa200\sl276\slmult1 dragon Smaug."\par

\pard\li1440\sa200\sl276\slmult1\b0 MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> \b db.movies.update(\{'title' : 'The Hobbit: An Unexpected Journey'\},\{$set : \{'synopsis' : 'A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug.'\}\})\b0\par
WriteResult(\{ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 \})\par
MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> db.movies.find(\{'title' : 'The Hobbit: An Unexpected Journey'\}).pretty()\par
\{\par
        "_id" : ObjectId("5f29727a565a201f2c63a9b7"),\par
        "title" : "The Hobbit: An Unexpected Journey",\par
        "writer" : "J.R.R. Tolkein",\par
        "year" : "2012",\par
        "franchise" : "The Hobbit",\par
        "synopsis" : "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."\par
\}\par

\pard\li720\sa200\sl276\slmult1\b 2. add a synopsis to "The Hobbit: The Desolation of Smaug" : "The dwarves,\par
along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim\par
Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a\par
mysterious and magical ring."\par

\pard\li1440\sa200\sl276\slmult1\b0 MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> \b db.movies.update(\{'title' : "The Hobbit: The Desolation of Smaug"\},\{$set : \{'synopsis' : 'The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring.'\}\})\b0\par
WriteResult(\{ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 \})\par
MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> db.movies.find(\{'title' : 'The Hobbit: The Desolution of Smaug'\}).pretty()\par
MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> db.movies.find(\{'title' : 'The Hobbit: The Desolation of Smaug'\}).pretty()\par
\{\par
        "_id" : ObjectId("5f2972a6565a201f2c63a9b8"),\par
        "title" : "The Hobbit: The Desolation of Smaug",\par
        "writer" : "J.R.R. Tolkein",\par
        "year" : "2013",\par
        "franchise" : "The Hobbit",\par
        "synopsis" : "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."\par
\}\par

\pard\li720\sa200\sl276\slmult1\b\fs32 3. add an actor named "Samuel L. Jackson" to the movie "Pulp Fiction"\b0\fs28\par

\pard\li2160\sa200\sl276\slmult1 MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> \b db.movies.update(\{'title' : 'Pulp Fiction'\},\{$set : \{'actor' : "Samuel L. Jackson"\}\})\par
\b0 WriteResult(\{ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 \})\par
MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> db.movies.find(\{'title' : 'Pulp Fiction'\}).pretty()\par
\{\par
        "_id" : ObjectId("5f297240565a201f2c63a9b5"),\par
        "title" : "Pulp Fiction",\par
        "writer" : "Quentin Tarantino",\par
        "year" : "1994",\par
        "actors" : [\par
                "John Travolta",\par
                "Uma Thurman"\par
        ],\par
        "actor" : "Samuel L. Jackson"\par
\}\par
\par

\pard\sa200\sl276\slmult1\b Text Search\par
1. find all movies that have a synopsis that contains the word "Bilbo"\par

\pard\li720\sa200\sl276\slmult1\b0\fs24 MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> \b db.movies.find(\{synopsis : \{$regex : "Bilbo" \}\}).pretty()\par
\b0\{\par
        "_id" : ObjectId("5f29727a565a201f2c63a9b7"),\par
        "title" : "The Hobbit: An Unexpected Journey",\par
        "writer" : "J.R.R. Tolkein",\par
        "year" : "2012",\par
        "franchise" : "The Hobbit",\par
        "synopsis" : "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."\par
\}\par
\{\par
        "_id" : ObjectId("5f2972a6565a201f2c63a9b8"),\par
        "title" : "The Hobbit: The Desolation of Smaug",\par
        "writer" : "J.R.R. Tolkein",\par
        "year" : "2013",\par
        "franchise" : "The Hobbit",\par
        "synopsis" : "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."\par
\}\par
\{\par
        "_id" : ObjectId("5f29730a565a201f2c63a9b9"),\par
        "title" : "The Hobbit: The Battle of the Five Armies",\par
        "writer" : "J.R.R. Tolkein",\par
        "year" : "2012",\par
        "franchise" : "The Hobbit",\par
        "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness."\par
\}\par
\par

\pard\sa200\sl276\slmult1\b\fs28 2. find all movies that have a synopsis that contains the word "Gandalf"\par

\pard\li720\sa200\sl276\slmult1\tab\b0\fs24 MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> \b db.movies.find(\{synopsis : \{$regex : "Gandalf" \}\}).pretty()\par
\b0\{\par
        "_id" : ObjectId("5f2972a6565a201f2c63a9b8"),\par
        "title" : "The Hobbit: The Desolation of Smaug",\par
        "writer" : "J.R.R. Tolkein",\par
        "year" : "2013",\par
        "franchise" : "The Hobbit",\par
        "synopsis" : "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."\par
\}\par

\pard\sa200\sl276\slmult1\b\fs28 3. find all movies that have a synopsis that contains the word "Bilbo" and not the\par
word "Gandalf"\par

\pard\li720\sa200\sl276\slmult1\tab\fs24 db.movies.find( \{$and:  [\{synopsis : \{$regex : "Bilbo"\}\}, \{synopsis : \{$regex : "Gandalf" \}\}]\}).pretty()\par
\b0\{\par
        "_id" : ObjectId("5f2972a6565a201f2c63a9b8"),\par
        "title" : "The Hobbit: The Desolation of Smaug",\par
        "writer" : "J.R.R. Tolkein",\par
        "year" : "2013",\par
        "franchise" : "The Hobbit",\par
        "synopsis" : "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."\par
\}\par

\pard\sa200\sl276\slmult1\b\fs28\par
4. find all movies that have a synopsis that contains the word "dwarves" or\par
"hobbit"\par

\pard\li720\sa200\sl276\slmult1\b0\fs24 MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY>\par
 \b db.movies.find( \{$and:  [\{synopsis : \{$regex : "Bilbo"\}\}, \{synopsis : \{$not : /Gandalf/ \}\}]\}).pretty()\b0\par
\{\par
        "_id" : ObjectId("5f29727a565a201f2c63a9b7"),\par
        "title" : "The Hobbit: An Unexpected Journey",\par
        "writer" : "J.R.R. Tolkein",\par
        "year" : "2012",\par
        "franchise" : "The Hobbit",\par
        "synopsis" : "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."\par
\}\par
\{\par
        "_id" : ObjectId("5f29730a565a201f2c63a9b9"),\par
        "title" : "The Hobbit: The Battle of the Five Armies",\par
        "writer" : "J.R.R. Tolkein",\par
        "year" : "2012",\par
        "franchise" : "The Hobbit",\par
        "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep  the Lonely Mountain from falling into the hands of a rising darkness."\par
\}\par
MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> \par
\b db.movies.find( \{$or:  [\{synopsis : \{$regex : "dwarves"\}\}, \{synopsis : \{$regex : "hobbit" \}\}]\}).pretty()\b0\par
\{\par
        "_id" : ObjectId("5f29727a565a201f2c63a9b7"),\par
        "title" : "The Hobbit: An Unexpected Journey",\par
        "writer" : "J.R.R. Tolkein",\par
        "year" : "2012",\par
        "franchise" : "The Hobbit",\par
        "synopsis" : "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."\par
\}\par
\{\par
        "_id" : ObjectId("5f2972a6565a201f2c63a9b8"),\par
        "title" : "The Hobbit: The Desolation of Smaug",\par
        "writer" : "J.R.R. Tolkein",\par
        "year" : "2013",\par
        "franchise" : "The Hobbit",\par
        "synopsis" : "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."\par
\}\par

\pard\sa200\sl276\slmult1\b\fs28\par
5. find all movies that have a synopsis that contains the word "gold" and\par
"dragon"\par

\pard\li720\sa200\sl276\slmult1\b0\fs24 MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> \par
\b db.movies.find( \{$and:  [\{synopsis : \{$regex : "gold"\}\}, \{synopsis : \{$regex : "dragon" \}\}]\}).pretty()\b0\par
\{\par
        "_id" : ObjectId("5f29727a565a201f2c63a9b7"),\par
        "title" : "The Hobbit: An Unexpected Journey",\par
        "writer" : "J.R.R. Tolkein",\par
        "year" : "2012",\par
        "franchise" : "The Hobbit",\par
        "synopsis" : "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."\par
\}\b\par

\pard\sa200\sl276\slmult1\fs28 Delete Documents\par
1. delete the movie "Pee Wee Herman's Big Adventure"\b0\fs24\par

\pard\li720\sa200\sl276\slmult1 MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> \b db.movies.remove(\{'title' : "Pee Wee Herman's Big Adventure"\})\b0\par
WriteResult(\{ "nRemoved" : 1 \})\par

\pard\sa200\sl276\slmult1\b\fs28 2. delete the movie "Avatar"\par
\tab\b0 MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> \tab\b db.movies.remove(\{'title' : "Avatar"\})\par
\b0\tab WriteResult(\{ "nRemoved" : 1 \})\par
\b\par
\b0 MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> \b db.createCollection("users")\par
\b0\{\par
        "ok" : 1,\par
        "$clusterTime" : \{\par
                "clusterTime" : Timestamp(1596557319, 1),\par
                "signature" : \{\par
                        "hash" : BinData(0,"f4nB2TSfNMvxdZUqhR3iagl3knI="),\par
                        "keyId" : NumberLong("6856788058247790595")\par
                \}\par
        \},\par
        "operationTime" : Timestamp(1596557319, 1)\par
\}\par
MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> \b db.users.insert(\{username:"GoodGuyGreg", first_name:"Good Guy", last_name:"Greg"\})\par
\b0 WriteResult(\{ "nInserted" : 1 \})\par
MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> \b db.users.insert(\{username:"ScumbagSteve", fullname:\{first: "Scumbag", last:"Steve"\}\})\par
\b0 WriteResult(\{ "nInserted" : 1 \})\par
MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> \b db.createCollection("posts")\b0\par
\{\par
        "ok" : 1,\par
        "$clusterTime" : \{\par
                "clusterTime" : Timestamp(1596557506, 10),\par
                "signature" : \{\par
                        "hash" : BinData(0,"OZMax1mv+iJ5TSJuUEWhGLGcgpo="),\par
                        "keyId" : NumberLong("6856788058247790595")\par
                \}\par
        \},\par
        "operationTime" : Timestamp(1596557506, 10)\par
\}\par
MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> \b db.posts.insert(\{username:"GoodGuyGreg", title:"Passes out at Party", body:"Wakes up early and cleans house"\})\par
\b0 WriteResult(\{ "nInserted" : 1 \})\par
MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> \b db.posts.insert(\{ username:"GoodGuyGreg", title:"Steals your identity", body:"Raises your credit score"\})\par
\b0 WriteResult(\{ "nInserted" : 1 \})\par
MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> \b db.posts.insert(\{username:"GoodGuyGreg", title:"Reports a bug in your code", body:"Sends you a pull request"\})\par
\b0 WriteResult(\{ "nInserted" : 1 \})\par
MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> \b db.posts.insert(\{ username:"ScumbagSteve", title:"Borrows something", body:"Sells it"\})\b0\par
WriteResult(\{ "nInserted" : 1 \})\par
MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> \b db.posts.insert(\{ username:"ScumbagSteve", title:"Borrows everything", body:"The end"\})\b0\par
WriteResult(\{ "nInserted" : 1 \})\par
MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> \b db.posts.insert(\{username:"ScumbagSteve", title:"Forks your repo on github", body:"Sets to private"\})\b0\par
WriteResult(\{ "nInserted" : 1 \})\par
MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> \par
\b db.users.find().pretty()\par
\b0\{\par
        "_id" : ObjectId("5f29887b565a201f2c63a9bc"),\par
        "username" : "GoodGuyGreg",\par
        "first_name" : "Good Guy",\par
        "last_name" : "Greg"\par
\}\par
\{\par
        "_id" : ObjectId("5f2988ad565a201f2c63a9bd"),\par
        "username" : "ScumbagSteve",\par
        "fullname" : \{\par
                "first" : "Scumbag",\par
                "last" : "Steve"\par
        \}\par
\}\par
MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY>\par
 \b db.posts.find().pretty()\par
\b0\{\par
        "_id" : ObjectId("5f298927565a201f2c63a9be"),\par
        "username" : "GoodGuyGreg",\par
        "title" : "Passes out at Party",\par
        "body" : "Wakes up early and cleans house"\par
\}\par
\{\par
        "_id" : ObjectId("5f29894e565a201f2c63a9bf"),\par
        "username" : "GoodGuyGreg",\par
        "title" : "Steals your identity",\par
        "body" : "Raises your credit score"\par
\}\par
\{\par
        "_id" : ObjectId("5f298961565a201f2c63a9c0"),\par
        "username" : "GoodGuyGreg",\par
        "title" : "Reports a bug in your code",\par
        "body" : "Sends you a pull request"\par
\}\par
\{\par
        "_id" : ObjectId("5f29897a565a201f2c63a9c1"),\par
        "username" : "ScumbagSteve",\par
        "title" : "Borrows something",\par
        "body" : "Sells it"\par
\}\par
\{\par
        "_id" : ObjectId("5f298988565a201f2c63a9c2"),\par
        "username" : "ScumbagSteve",\par
        "title" : "Borrows everything",\par
        "body" : "The end"\par
\}\par
\{\par
        "_id" : ObjectId("5f298991565a201f2c63a9c3"),\par
        "username" : "ScumbagSteve",\par
        "title" : "Forks your repo on github",\par
        "body" : "Sets to private"\par
\}\par
MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> \b db.createCollection("comments")\par
\b0\{\par
        "ok" : 1,\par
        "$clusterTime" : \{\par
                "clusterTime" : Timestamp(1596557818, 1),\par
                "signature" : \{\par
                        "hash" : BinData(0,"D4B2ildHQ1Ldf3ZFZ1iCaloiUcI="),\par
                        "keyId" : NumberLong("6856788058247790595")\par
                \}\par
        \},\par
        "operationTime" : Timestamp(1596557818, 1)\par
\}\par
MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> \b db.comments.insert(\{username: "GoodGuyGreg", comment: "Hope you get a good deal!", post: ObjectId("5f29897a565a201f2c63a9c1") \})\par
\b0 WriteResult(\{ "nInserted" : 1 \})\par
MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> \b db.comments.insert(\{username: "GoodGuyGreg", comment: "What's mine is yours!", post: ObjectId("5f298988565a201f2c63a9c2") \})\par
\b0 WriteResult(\{ "nInserted" : 1 \})\par
MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> \b db.comments.insert(\{username: "GoodGuyGreg", comment: "Don't violate the licensing agreement!", post: ObjectId("5f298991565a201f2c63a9c3") \})\par
\b0 WriteResult(\{ "nInserted" : 1 \})\par
MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> \b db.comments.insert(\{username: "GoodGuyGreg", comment: "It still isn't clean", post: ObjectId("5f298927565a201f2c63a9be") \})\par
\b0 WriteResult(\{ "nInserted" : 1 \})\par
MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> \b db.comments.insert(\{username: "GoodGuyGreg", comment: "Denied your PR cause I found a hack", post: ObjectId("5f298961565a201f2c63a9c0") \})\par
\b0 WriteResult(\{ "nInserted" : 1 \})\par
MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> \par
\b db.users.find().pretty()\par
\b0\{\par
        "_id" : ObjectId("5f29887b565a201f2c63a9bc"),\par
        "username" : "GoodGuyGreg",\par
        "first_name" : "Good Guy",\par
        "last_name" : "Greg"\par
\}\par
\{\par
        "_id" : ObjectId("5f2988ad565a201f2c63a9bd"),\par
        "username" : "ScumbagSteve",\par
        "fullname" : \{\par
                "first" : "Scumbag",\par
                "last" : "Steve"\par
        \}\par
\}\par
MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> \par
\b db.posts.find().pretty()\b0\par
\{\par
        "_id" : ObjectId("5f298927565a201f2c63a9be"),\par
        "username" : "GoodGuyGreg",\par
        "title" : "Passes out at Party",\par
        "body" : "Wakes up early and cleans house"\par
\}\par
\{\par
        "_id" : ObjectId("5f29894e565a201f2c63a9bf"),\par
        "username" : "GoodGuyGreg",\par
        "title" : "Steals your identity",\par
        "body" : "Raises your credit score"\par
\}\par
\{\par
        "_id" : ObjectId("5f298961565a201f2c63a9c0"),\par
        "username" : "GoodGuyGreg",\par
        "title" : "Reports a bug in your code",\par
        "body" : "Sends you a pull request"\par
\}\par
\{\par
        "_id" : ObjectId("5f29897a565a201f2c63a9c1"),\par
        "username" : "ScumbagSteve",\par
        "title" : "Borrows something",\par
        "body" : "Sells it"\par
\}\par
\{\par
        "_id" : ObjectId("5f298988565a201f2c63a9c2"),\par
        "username" : "ScumbagSteve",\par
        "title" : "Borrows everything",\par
        "body" : "The end"\par
\}\par
\{\par
        "_id" : ObjectId("5f298991565a201f2c63a9c3"),\par
        "username" : "ScumbagSteve",\par
        "title" : "Forks your repo on github",\par
        "body" : "Sets to private"\par
\}\par
MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> \b db.posts.find(\{username : "GoodGuyGreg"\}).pretty()\b0\par
\{\par
        "_id" : ObjectId("5f298927565a201f2c63a9be"),\par
        "username" : "GoodGuyGreg",\par
        "title" : "Passes out at Party",\par
        "body" : "Wakes up early and cleans house"\par
\}\par
\{\par
        "_id" : ObjectId("5f29894e565a201f2c63a9bf"),\par
        "username" : "GoodGuyGreg",\par
        "title" : "Steals your identity",\par
        "body" : "Raises your credit score"\par
\}\par
\{\par
        "_id" : ObjectId("5f298961565a201f2c63a9c0"),\par
        "username" : "GoodGuyGreg",\par
        "title" : "Reports a bug in your code",\par
        "body" : "Sends you a pull request"\par
\}\par
MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> \b db.posts.find(\{username : "ScumbagSteve"\}).pretty()\b0\par
\{\par
        "_id" : ObjectId("5f29897a565a201f2c63a9c1"),\par
        "username" : "ScumbagSteve",\par
        "title" : "Borrows something",\par
        "body" : "Sells it"\par
\}\par
\{\par
        "_id" : ObjectId("5f298988565a201f2c63a9c2"),\par
        "username" : "ScumbagSteve",\par
        "title" : "Borrows everything",\par
        "body" : "The end"\par
\}\par
\{\par
        "_id" : ObjectId("5f298991565a201f2c63a9c3"),\par
        "username" : "ScumbagSteve",\par
        "title" : "Forks your repo on github",\par
        "body" : "Sets to private"\par
\}\par
MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> \b db.comments.find().pretty()\b0\par
\{\par
        "_id" : ObjectId("5f298a89565a201f2c63a9c4"),\par
        "username" : "GoodGuyGreg",\par
        "comment" : "Hope you get a good deal!",\par
        "post" : ObjectId("5f29897a565a201f2c63a9c1")\par
\}\par
\{\par
        "_id" : ObjectId("5f298acd565a201f2c63a9c5"),\par
        "username" : "GoodGuyGreg",\par
        "comment" : "What's mine is yours!",\par
        "post" : ObjectId("5f298988565a201f2c63a9c2")\par
\}\par
\{\par
        "_id" : ObjectId("5f298b11565a201f2c63a9c6"),\par
        "username" : "GoodGuyGreg",\par
        "comment" : "Don't violate the licensing agreement!",\par
        "post" : ObjectId("5f298991565a201f2c63a9c3")\par
\}\par
\{\par
        "_id" : ObjectId("5f298b49565a201f2c63a9c7"),\par
        "username" : "GoodGuyGreg",\par
        "comment" : "It still isn't clean",\par
        "post" : ObjectId("5f298927565a201f2c63a9be")\par
\}\par
\{\par
        "_id" : ObjectId("5f298b89565a201f2c63a9c8"),\par
        "username" : "GoodGuyGreg",\par
        "comment" : "Denied your PR cause I found a hack",\par
        "post" : ObjectId("5f298961565a201f2c63a9c0")\par
\}\par
MongoDB Enterprise atlas-phxzbw-shard-0:PRIMARY> \b db.comments.find(\{username : "GoodGuyGreg"\}).pretty()\b0\par
\{\par
        "_id" : ObjectId("5f298a89565a201f2c63a9c4"),\par
        "username" : "GoodGuyGreg",\par
        "comment" : "Hope you get a good deal!",\par
        "post" : ObjectId("5f29897a565a201f2c63a9c1")\par
\}\par
\{\par
        "_id" : ObjectId("5f298acd565a201f2c63a9c5"),\par
        "username" : "GoodGuyGreg",\par
        "comment" : "What's mine is yours!",\par
        "post" : ObjectId("5f298988565a201f2c63a9c2")\par
\}\par
\{\par
        "_id" : ObjectId("5f298b11565a201f2c63a9c6"),\par
        "username" : "GoodGuyGreg",\par
        "comment" : "Don't violate the licensing agreement!",\par
        "post" : ObjectId("5f298991565a201f2c63a9c3")\par
\}\par
\{\par
        "_id" : ObjectId("5f298b49565a201f2c63a9c7"),\par
        "username" : "GoodGuyGreg",\par
        "comment" : "It still isn't clean",\par
        "post" : ObjectId("5f298927565a201f2c63a9be")\par
\}\par
\{\par
        "_id" : ObjectId("5f298b89565a201f2c63a9c8"),\par
        "username" : "GoodGuyGreg",\par
        "comment" : "Denied your PR cause I found a hack",\par
        "post" : ObjectId("5f298961565a201f2c63a9c0")\par
\}\par
\fs22\par
}
 